# Iterating Arrays Using nditer()
import numpy as np

arr = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])

for x in np.nditer(arr):
    print(x) 


#Iterating Array With Different Data Types
import numpy as np

arr = np.array([1, 2, 3])

for x in np.nditer(arr,flags=['buffered'], op_dtypes=['S']):
    print(x)    


import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])

for x in np.nditer(arr[:, ::2]):
  print(x)


# Enumerated Iteration Using ndenumerate()
import numpy as np

arr = np.array([1, 2, 3])
for idx , x in np.ndenumerate(arr):
    print(idx,x)


import numpy as np

arr1 = np.array([1, 2, 3])

arr2 = np.array([4, 5, 6])

arr=np.concatenate((arr1,arr2))
print(arr)

import numpy as np

arr1 = np.array([[1, 2], [3, 4]])

arr2 = np.array([[5, 6], [7, 8]])

arr=np.concatenate((arr1,arr2),axis=1)
print(arr)


import numpy as np

arr1 = np.array([1, 2, 3])

arr2 = np.array([4, 5, 6])


arr=np.stack((arr1,arr2),axis=1)
print(arr)


# Stacking Along Rows
# NumPy provides a helper function: hstack() to stack along rows.

arr1 = np.array([1, 2, 3])

arr2 = np.array([4, 5, 6])

arr=np.hstack((arr1,arr2))
print(arr)

# Stacking Along Columns
# NumPy provides a helper function: vstack()  to stack along columns.
arr1 = np.array([1, 2, 3])

arr2 = np.array([4, 5, 6])

arr = np.vstack((arr1,arr2))
print(arr)


import numpy as np

arr1 = np.array([1, 2, 3])

arr2 = np.array([4, 5, 6])

arr=np.dstack((arr1,arr2))
print(arr)

import numpy as np

arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])

newarr= np.array_split(arr,3)
print(newarr)

import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])

newarr = np.array_split(arr, 3)

print(newarr)





import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])

newarr = np.array_split(arr, 3, axis=1)

print(newarr)


import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])

newarr = np.hsplit(arr, 3)

print(newarr)


# NumPy Searching Arrays

import numpy as np

arr = np.array([1, 2, 3, 4, 5, 4, 4])

x=np.where(arr==4)
print(x)



import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])

x=np.where(arr%2==0)
print(x)


# Search Sorted
import numpy as np

arr = np.array([6, 7, 8, 9])
x=np.searchsorted(arr,7)
print(x)



import numpy as np

arr = np.array([6, 7, 8, 9])

x-np.searchsorted(arr,9)
print(x)


import numpy as np

arr = np.array([6, 7, 8, 9])

x = np.searchsorted(arr, 7, side='right')

print(x)



import numpy as np

arr = np.array([1, 3, 5, 7])

x=np.searchsorted(arr,[2,4,6])
print(x)




import numpy as np

arr = np.array([6, 7, 8, 9])

x=np.searchsorted(arr)
